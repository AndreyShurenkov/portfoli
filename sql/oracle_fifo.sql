/**************************
  Код для Oracle
***************************/
DROP TABLE agrmnt;
DROP TABLE agrmnt_res;

CREATE TABLE agrmnt (id NUMBER GENERATED BY DEFAULT AS IDENTITY,
					 agrmnt varchar2(100),
					 period DATE,
				 	 agrmnt_sum NUMBER,
				 	 type_operation char(1),
				 	 load_date date DEFAULT sysdate,
				 	 type_dml char(1) DEFAULT 'I')
	   PARTITION BY RANGE (agrmnt) (PARTITION agrmnt_prt VALUES LESS THAN (MAXVALUE));
CREATE INDEX idx_agrmnt_01 ON agrmnt (agrmnt);
						   
-- Генерируем данные
BEGIN
 DELETE agrmnt;
 -- Пишем начисления
 FOR agr IN (SELECT '001/01/'||dbms_random.string('U',9) agrmnt, round(dbms_random.value(1000,2000)) agrmnt_sum, 'A' type_operation FROM dual CONNECT BY LEVEL <= 2)
 LOOP
  FOR pr IN (SELECT ADD_MONTHS(trunc(sysdate,'yyyy'),LEVEL-1) period FROM dual CONNECT BY 0+LEVEL < 13)
  LOOP
	INSERT INTO agrmnt (agrmnt, period, agrmnt_sum, type_operation) VALUES (agr.agrmnt, pr.period, agr.agrmnt_sum, agr.type_operation);  	
  END LOOP;
 END LOOP;
 
 -- Пишем оплаты, делаем так что может образоваться по итогу оплат либо перебор либо недобор
 FOR agr IN (SELECT agrmnt, period+dbms_random.value(1,20) period, round(dbms_random.value(agrmnt_sum-100,agrmnt_sum+100)) agrmnt_sum, 'P' type_operation  
  			   FROM agrmnt)
 LOOP
  INSERT INTO agrmnt (agrmnt, period, agrmnt_sum, type_operation) VALUES (agr.agrmnt, agr.period, agr.agrmnt_sum, agr.type_operation);  	
 END LOOP;
 COMMIT;
END;

SELECT agrmnt, type_operation, sum(agrmnt_sum) agrmnt_sum FROM agrmnt GROUP BY agrmnt, type_operation;

-- Алгортим, специально разбит по шагам что бы можно было посмотреть результат каждого действия
CREATE TABLE agrmnt_res as
WITH tmp_accrual AS (SELECT fe.*,
							sum(fe.agrmnt_sum) OVER (PARTITION BY agrmnt ORDER BY period) agrmnt_sum_sum
					   FROM agrmnt fe
					  WHERE type_operation = 'A'),
	 tmp_payment AS (SELECT fe.*,
							sum(fe.agrmnt_sum) OVER (PARTITION BY agrmnt ORDER BY period) agrmnt_sum_sum
					   FROM agrmnt fe
					  WHERE type_operation = 'P'),
	  tmp_step_1 AS (SELECT nvl(ta.agrmnt,tp.agrmnt) agrmnt,
						    ta.period period_acr,
						    ta.agrmnt_sum agrmnt_sum_acr,
						    tp.period period_pr,
						    tp.agrmnt_sum agrmnt_sum_pr,
						    ta.agrmnt_sum_sum agrmnt_sum_sum_acr,
						    tp.agrmnt_sum_sum agrmnt_sum_sum_pr
					   FROM tmp_accrual ta
					   FULL JOIN tmp_payment tp ON (ta.agrmnt = tp.agrmnt AND
					   							    ta.agrmnt_sum_sum = tp.agrmnt_sum_sum)
					  ORDER BY nvl(ta.agrmnt,tp.agrmnt), nvl(ta.agrmnt_sum_sum,tp.agrmnt_sum_sum)), -- сортировка для наглядности результата данного действия	
	  tmp_step_2 AS (SELECT ts1.agrmnt,
					 	    FIRST_VALUE(period_acr) IGNORE NULLS OVER (PARTITION BY agrmnt ORDER BY nvl(ts1.agrmnt_sum_sum_acr,ts1.agrmnt_sum_sum_pr) ROWS  BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) period_acr,
						    FIRST_VALUE(agrmnt_sum_acr) IGNORE NULLS OVER (PARTITION BY agrmnt ORDER BY nvl(ts1.agrmnt_sum_sum_acr,ts1.agrmnt_sum_sum_pr) ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) agrmnt_sum_acr,
						    FIRST_VALUE(period_pr) IGNORE NULLS OVER (PARTITION BY agrmnt ORDER BY nvl(ts1.agrmnt_sum_sum_acr,ts1.agrmnt_sum_sum_pr) ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) period_pr,
						    FIRST_VALUE(agrmnt_sum_pr) IGNORE NULLS OVER (PARTITION BY agrmnt ORDER BY nvl(ts1.agrmnt_sum_sum_acr,ts1.agrmnt_sum_sum_pr) ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) agrmnt_sum_pr,
						    NVL(agrmnt_sum_sum_acr,agrmnt_sum_sum_pr) agrmnt_sum_sum
					   FROM tmp_step_1 ts1),
	  tmp_step_3 AS (SELECT ts2.agrmnt,
					 	    ts2.period_acr,
						    ts2.agrmnt_sum_acr,
						    ts2.period_pr,
						    ts2.agrmnt_sum_pr,
						    ts2.agrmnt_sum_sum - nvl(lag(ts2.agrmnt_sum_sum) OVER (PARTITION BY ts2.agrmnt ORDER BY agrmnt_sum_sum),0) agrmnt_sum_new
					   FROM tmp_step_2 ts2),
      tmp_step_4 AS (SELECT ts3.agrmnt,
					  	    ts3.period_acr,
						    CASE WHEN ts3.agrmnt_sum_acr IS NOT NULL THEN ts3.agrmnt_sum_new END agrmnt_sum_acr,
						    ts3.period_pr,
						    CASE WHEN ts3.agrmnt_sum_pr IS NOT NULL THEN ts3.agrmnt_sum_new END agrmnt_sum_pr
					   FROM tmp_step_3 ts3)
SELECT * FROM tmp_step_4;

-- Проверяем
  WITH tmp_data_res AS (SELECT agrmnt, sum(agrmnt_sum_acr) agrmnt_sum_acr, sum(agrmnt_sum_pr) agrmnt_sum_pr
					 	  FROM agrmnt_res
					 	 GROUP BY agrmnt),
 	    tmp_data_ex AS (SELECT *
   	   					  FROM (SELECT agrmnt, agrmnt_sum, type_operation FROM agrmnt)
   					  	 PIVOT (sum(agrmnt_sum) FOR type_operation IN ('A' AS agrmnt_sum_acr, 'P' AS agrmnt_sum_pr)))
 SELECT res.*, ex.* 
   FROM tmp_data_res res
   JOIN tmp_data_ex ex ON (res.agrmnt = ex.agrmnt);
   
